function movecount, byteinput  ;;function that counts moves made by player
  moves = 0
  if byteinput eq 113 or byteinput eq 119 or byteinput eq 101 or byteinput eq 97 or byteinput eq 115 or byteinput eq 100 or byteinput eq 122 or byteinput eq 120 or byteinput eq 99 THEN BEGIN
     ;keys q,w,e,a,s,d,z,x,c
     moves++
  end
  return, moves
end

;function modifynew, board,topdisk,middisk,botdisk,topposx,topposy,midposx,midposy,botposx,botposy ;;function that modifies board after a move
;  size = size(intarr(17,6)+1) ;size(oriboard)
;  boardcopy = board
;     for t = 0,4 DO BEGIN
;        for m = 0,4 DO BEGIN
;           for b = 0,4 DO BEGIN ;;HOW TO MODIFY OLD POSITIONS ALONG WITH NEW POSITIONS?
;           board[t+topposx,topposy] = boardcopy[t+topposx,topposy] + topdisk[t] 
;           board[m+midposx,midposy] = boardcopy[m+midposx,midposy] + middisk[m]
;           board[b+botposx,botposy] = boardcopy[b+botposx,botposy] + botdisk[b]
;           end
;        end
;     end
;     display, board, xticks = size[1]+2, xticklen = 1, xrange = [0,size[1]], yticks = size[2]+2, yticklen = 1, yrange = [0,size[2]], xtickname = replicate(' ', size[1]+3), ytickname =replicate(' ', size[2]+3)
;end

function modify, board,disk,posx,posy,oldposx,oldposy
  size = size(intarr(17,6)+1) ;size(oriboard)
  boardcopy = board
     for x = 0,4 DO BEGIN
        board[x+posx,posy] = boardcopy[x+posx,posy] + disk[x]
        board[x+oldposx,oldposy] = boardcopy[x+oldposx,oldposy] - disk[x]
     end
     display, board, xticks = size[1]+2, xticklen = 1, xrange = [0,size[1]], yticks = size[2]+2, yticklen = 1, yrange = [0,size[2]], xtickname = replicate(' ', size[1]+3), ytickname =replicate(' ', size[2]+3)
end

function checktop, board, TopNewPosx, TopCurPosx, TopCurPosy ;;function that governs vertical movements of top disk
  ysize = 6
  if TopCurPosy eq ysize/2 THEN BEGIN  ;if top disk is on top
     TopNewPosy = TopCurPosy - 2
  end
  if TopCurPosy eq (ysize/2) - 1 THEN BEGIN  ;if top disk is in middle
     if board[TopNewPosx+2,TopCurPosy-1] eq 0 then TopNewPosy = TopCurPosy     ;new peg has one disk
     if board[TopNewPosx+2,TopCurPosy-1] eq 1 then TopNewPosy = TopCurPosy - 1 ;new peg has no disk
  end
  if TopCurPosy eq (ysize/2) - 2 THEN BEGIN   ;if top disk is in bottom
     if board[TopNewPosx,TopCurPosy] eq 1 then TopNewPosy = TopCurPosy  ;new peg has no disk
     if board[TopNewPosx+2,TopCurPosy] eq 0 AND board[TopNewPosx+2,TopCurPosy+1] eq 0 then TopNewPosy = TopCurPosy + 2 ;new peg has two disks
     if board[TopNewPosx+2,TopCurPosy] eq 0 AND board[TopNewPosx+2,TopCurPosy+1] eq 1 then TopNewPosy = TopCurPosy + 1 ;new peg has one disk
  end
  return, TopNewPosy
end

function checkmid, board, MidNewPosx, MidCurPosx, MidCurPosy ;;function that governs vertical movements of middle disk
  ysize = 6
  if MidCurPosy eq (ysize/2) - 1 THEN BEGIN  ;if mid disk is in middle
     if board[MidNewPosx+2,MidCurPosy-1] eq 0 then MidNewPosy = MidCurPosy     ;new peg has a disk
     if board[MidNewPosx+2,MidCurPosy-1] eq 1 then MidNewPosy = MidCurPosy - 1 ;new peg has no disk
  end
  if MidCurPosy eq (ysize/2) - 2 THEN BEGIN  ;if mid disk is in bottom 
     if board[MidNewPosx+2,MidCurPosy] eq 0 then MidNewPosy = MidCurPosy + 1   ;new peg has a disk
     if board[MidNewPosx+2,MidCurPosy] eq 1 then MidNewPosy = MidCurPosy       ;new peg has no disk
  end
  return, MidNewPosy
end

pro tower
  ;;disks 
     bottomdisk = [-1,-1,-1,-1,-1]
     middledisk = [0,-1,-1,-1,0]
     topdisk = [0,0,-1,0,0]

  ;;making the board
     ;original board
        xsize = 17
        ysize = 6
        oriboard = intarr(xsize, ysize)+1   ;board made of 1s
        size = size(oriboard)
        moves = 0
     ;board with pretty border (border made of 0s)
        board = [[indgen(xsize+2,1)*0],[intarr(1,ysize), oriboard, intarr(1,ysize)], [indgen(xsize+2,1)*0]] 
  
  ;;starting positions       
      TopCurPosx = (xsize-2)/5 - 2 
      TopCurPosy = ysize/2
      MidCurPosx = (xsize-2)/5 - 2
      MidCurPosy = ysize/2 - 1
      BotCurPosx = (xsize-2)/5 - 2
      BotCurPosy = ysize/2 - 2

  ;;display starting board
;     for i = 1,5 DO BEGIN    ;bottom
;        board[i,1] = 0
;     end
;     for j = 2,4 DO BEGIN    ;middle
;        board[j,2] = 0
;     end
;        board[3,3] = 0       ;top
;     display, board, title = 'Welcome!', xticks = size[1]+2, xticklen = 1, xrange = [0,size[1]], yticks = size[2]+2, yticklen = 1, yrange = [0, size[2]], xtickname = replicate(' ', size[1]+3), ytickname = replicate(' ', size[2]+3)

;      if byteinput eq 32 THEN BEGIN ;space bar to start or reset  
;          TopNewPosx = TopCurPosx
;          TopNewPosy = TopCurPosy
;          MidNewPosx = MidCurPosx
;          MidNewPosy = MidCurPosy
;          BotNewPosx = BotCurPosx
;         BotNewPosy = BotCurPosy
;         modifytop = modify(board,topdisk,TopNewPosx,TopNewPosy,TopCurPosx,TopCurPosy)
;          TopCurPosx = TopNewPosx
;          TopCurPosy = TopNewPosy
;         modifymid = modify(board,middledisk,MidNewPosx,MidNewPosy,MidCurPosx,MidCurPosy)
;         MidCurPosx = MidNewPosx
;           MidCurPosy = MidNewPosy
;          modifybot = modify(board,bottomdisk,BotNewPosx,BotNewPosy,BotCurPosx,BotCurPosy)
;           BotCurPosx = BotNewPosx
;           BotCurPosy = BotNewPosy
;      end

  ;;user control
     while 0 eq 0 DO BEGIN   ;continuously asks for input   
        input = get_kbrd(/escape)
        byteinput = byte(input)
     if byteinput eq 113 or byteinput eq 119 or byteinput eq 101 or byteinput eq 97 or byteinput eq 115 or byteinput eq 100 or byteinput eq 122 or byteinput eq 120 or byteinput eq 99 THEN BEGIN

     ;MOVING TOP DISK
      if byteinput eq 113 or byteinput eq 119 or byteinput eq 101 THEN BEGIN
        if byteinput eq 113 THEN BEGIN  ;q key
           TopNewPosx = (xsize-2)/5 - 2
           TopNewPosy = checktop(board, TopNewPosx, TopCurPosx, TopCurPosy)
        end

        if byteinput eq 119 THEN BEGIN  ;w key           
           TopNewPosx = (xsize-2)/5 + 4
           TopNewPosy = checktop(board, TopNewPosx, TopCurPosx, TopCurPosy)
        end
        
        if byteinput eq 101 THEN BEGIN  ;e key
           TopNewPosx = (xsize-2)/5 + 10
           TopNewPosy = checktop(board, TopNewPosx, TopCurPosx, TopCurPosy)
        end
           modifytop = modify(board,topdisk,TopNewPosx,TopNewPosy,TopCurPosx,TopCurPosy)
           TopCurPosx = TopNewPosx
           TopCurPosy = TopNewPosy         
      end

     ;MOVING MIDDLE DISK           
      if byteinput eq 97 or byteinput eq 115 or byteinput eq 100 THEN BEGIN
        if byteinput eq 97 THEN BEGIN   ;a key
           if board[MidCurPosx+2,MidCurPosy-1] eq 0 then begin  ;if something's on top, don't move
              MidNewPosx = MidCurPosx
              MidNewPosy = MidCurPosy
           endif else begin
              MidNewPosx = (xsize-2)/5 - 2
              MidNewPosy = checkmid(board, MidNewPosx, MidCurPosx, MidCurPosy)
           endelse
        end

        if byteinput eq 115 THEN BEGIN  ;s key
           if board[MidCurPosx+2,MidCurPosy-1] eq 0 then begin
              MidNewPosx = MidCurPosx 
              MidNewPosy = MidCurPosy
           endif else begin
              MidNewPosx = (xsize-2)/5 + 4
              MidNewPosy = checkmid(board, MidNewPosx, MidCurPosx, MidCurPosy)
           endelse
        end

        if byteinput eq 100 THEN BEGIN  ;d key
           if board[MidCurPosx+2,MidCurPosy-1] eq 0 then begin
              MidNewPosx = MidCurPosx 
              MidNewPosy = MidCurPosy
           endif else begin 
              MidNewPosx = (xsize-2)/5 + 10
              MidNewPosy = checkmid(board, MidNewPosx, MidCurPosx, MidCurPosy)
           endelse
        end
           modifymid = modify(board,middledisk,MidNewPosx,MidNewPosy,MidCurPosx,MidCurPosy)
           MidCurPosx = MidNewPosx
           MidCurPosy = MidNewPosy
      end

     ;MOVING BOTTOM DISK          
      if byteinput eq 122 or byteinput eq 120 or byteinput eq 99 THEN BEGIN
        if byteinput eq 122 THEN BEGIN  ;z key
           BotNewPosx = (xsize-2)/5 - 2
           if board[BotCurPosx+2, BotCurPosy+1] eq 0 or board[BotNewPosx+2,BotCurPosy+1] eq 0 then BotNewPosx = BotCurPosx else BotNewPosx = (xsize-2)/5 - 2
           BotNewPosy = BotCurPosy
        end

        if byteinput eq 120 THEN BEGIN  ;x key
           BotNewPosx = (xsize-2)/5 + 4
           if board[BotCurPosx+2, BotCurPosy+1] eq 0 or board[BotNewPosx+2,BotCurPosy+1] eq 0 then BotNewPosx = BotCurPosx else BotNewPosx = (xsize-2)/5 + 4  
           BotNewPosy = BotCurPosy
        end

        if byteinput eq 99 THEN BEGIN   ;c key
           BotNewPosx = (xsize-2)/5 + 10
           if board[BotCurPosx+2, BotCurPosy+1] eq 0 or board[BotNewPosx+2,BotCurPosy+1] eq 0 then BotNewPosx = BotCurPosx else BotNewPosx = (xsize-2)/5 + 10  
           BotNewPosy = BotCurPosy
        end
           modifybot = modify(board,bottomdisk,BotNewPosx,BotNewPosy,BotCurPosx,BotCurPosy)
           BotCurPosx = BotNewPosx
           BotCurPosy = BotNewPosy
      end

     endif else BEGIN           ;if input is not any assigned key
        print, "Not a key!"
     endelse

     ;MODIFYING BOARD AFTER MOVE       
;        newboard =  modifynew(board,topdisk,middledisk,bottomdisk,TopNewPosx,TopNewPosy,MidNewPosx,MidNewPosy,BotNewPosx,BotNewPosy)

     ;move counter
        moves+= movecount(byteinput)
        print, strcompress('Moves: ' + string(moves))
     endwhile

  ;;winning condition
     for i = 13,17 DO BEGIN
        for j = 14,16 DO BEGIN
           if (board[i,1] = 0) AND (board[j,2] = 0) AND (board[15,3] = 0) THEN BEGIN ;disks in winning positions
             display, board, title = 'YOU WON!', xticks = size[1]+2, xticklen = 1, xrange = [0,size[1]], yticks = size[2]+2, yticklen = 1, yrange = [0, size[2]], xtickname = replicate(' ', size[1]+3), ytickname = replicate(' ', size[2]+3)
           end
        end
     end
end
